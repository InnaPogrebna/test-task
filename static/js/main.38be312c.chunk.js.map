{"version":3,"sources":["api/api.ts","components/Header.tsx","components/PostsUser.tsx","components/UsersList.tsx","components/Pagination.tsx","components/Sort.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["request","url","option","a","fetch","response","json","Header","searchValue","setSearchValue","className","type","placeholder","value","onChange","event","target","PostsUser","posts","useState","openPost","setOpenPost","getOpenPost","currentTarget","childNodes","classList","remove","add","map","post","onClick","title","body","id","UsersList","users","openPosts","getUserPostId","user","name","email","phone","Pagination","perPage","currentPage","getNextPage","getPrevPage","pageNumbers","Math","ceil","length","disabled","Sort","sortByName","App","setPosts","setUsers","setCurrentPage","userPostId","setUserPostId","sortOrder","setSortOrder","sortBy","setSortBy","setOpenPosts","lastIndex","Number","firstIndex","useEffect","then","userId","filter","usersSearch","useMemo","toLowerCase","includes","sort","b","localeCompare","currentUsers","slice","postId","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38be312c.chunk.js","sourcesContent":["export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const request = async (url: string, option?:{}) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    return await response.json();\n  } catch (error) {\n    return 'Error';\n  }\n};\n","import React from 'react';\nimport '../App.scss';\n\ntype Props = {\n  searchValue: string,\n  setSearchValue: (searchValue:string) => void,\n};\n\nexport const Header: React.FC<Props> = ({ searchValue, setSearchValue }) => {\n  return (\n    <div className=\"header\">\n      <div className=\"header__logo\">Lorem Ipsum</div>\n      <input\n        type=\"text\"\n        className=\"header__search\"\n        placeholder=\"Search\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default Header;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React, { useState } from 'react';\nimport '../App.scss';\nimport { Post } from '../types/post';\n\ntype Props = {\n  posts: Post[],\n};\n\nexport const PostsUser: React.FC<Props> = ({ posts }) => {\n  const [openPost, setOpenPost] = useState(false);\n  const getOpenPost = (event: React.FormEvent<HTMLLIElement>): void => {\n    setOpenPost(true);\n    if (openPost === true) {\n      (event.currentTarget.childNodes[1] as Element).classList.remove('hide');\n      (event.currentTarget.childNodes[1] as Element).classList.add('open');\n      setOpenPost(false);\n    } else {\n      (event.currentTarget.childNodes[1] as Element).classList.remove('open');\n      (event.currentTarget.childNodes[1] as Element).classList.add('hide');\n    }\n  };\n\n  return (\n    <div className=\"posts\">\n      <div className=\"posts__scroll\">\n        <ul className=\"posts__list\">\n          {posts.map((post) => (\n            <li key={post.id} className=\"posts__list-item\" onClick={getOpenPost}>\n              {post.title}\n              <p className=\"posts__list-item-text hide\">{post.body}</p>\n              <p className=\"posts__list-border\"></p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PostsUser;\n","import React from 'react';\nimport { User } from '../types/user';\nimport { Post } from '../types/post';\nimport { PostsUser } from './PostsUser';\n\ntype Props = {\n  users: User[];\n  posts: Post[];\n  openPosts: boolean,\n  getUserPostId: (postId: number) => void;\n};\n\nexport const UsersList: React.FC<Props> = ({\n  users, posts, openPosts, getUserPostId,\n}) => {\n  return (\n    <div className={`users ${openPosts ? 'is-open__users' : ''}`}>\n      <div className=\"is__open__users-wrapper\">\n        <ul className=\"users__list\">\n          {users.map((user) => (\n            <li\n              key={user.id}\n              className={`users__list-item ${openPosts ? 'is-open__users-item' : ''}`}\n            >\n              <p className=\"users__list-item-text\">\n                Name:&nbsp;\n                {user.name}\n              </p>\n              <p className=\"users__list-item-text\">\n                Email:&nbsp;\n                {user.email}\n              </p>\n              <p className=\"users__list-item-text\">\n                Phone: &nbsp;\n                {user.phone}\n              </p>\n              <p className=\"users__list-item-text\">\n                id:&nbsp;\n                {user.id}\n              </p>\n              <button\n                type=\"button\"\n                className={`users__list-button ${openPosts ? 'is-open__users-button' : ''}`}\n                onClick={() => getUserPostId(user.id)}\n              >\n                Lorem ipsum\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      {openPosts && (\n        <div className=\"users__posts\">\n          <PostsUser posts={posts} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UsersList;\n","import React from 'react';\nimport '../App.scss';\nimport { User } from '../types/user';\n\ntype Props = {\n  users: User[];\n  perPage: number;\n  currentPage: number;\n  getNextPage: () => void;\n  getPrevPage: () => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  users,\n  perPage,\n  currentPage,\n  getNextPage,\n  getPrevPage,\n\n}) => {\n  const pageNumbers = Math.ceil(users.length / perPage);\n\n  return (\n    <div className=\"pagination\">\n      <button\n        type=\"button\"\n        className={`pagination__button pagination__button--prev\n        ${currentPage === 1 ? 'pagination__disabled' : ''}`}\n        onClick={getPrevPage}\n        disabled={currentPage === 1}\n      >\n        Previous\n      </button>\n      <button\n        type=\"button\"\n        className={`pagination__button pagination__button--next\n        ${currentPage >= pageNumbers ? 'pagination__disabled' : ''}`}\n        onClick={getNextPage}\n        disabled={currentPage >= pageNumbers}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport '../App.scss';\n\ntype Props = {\n  sortByName: ()=> void,\n};\n\nexport const Sort: React.FC<Props> = ({ sortByName }) => {\n  return (\n    <div className=\"header\">\n      <button\n        type=\"button\"\n        className=\"users__list-button\"\n        onClick={sortByName}\n      >\n        Sort by Name\n      </button>\n    </div>\n  );\n};\n\nexport default Sort;\n","/* eslint-disable no-console */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport './App.scss';\n\n// import { PostDetails } from './components/PostDetails';\nimport { Post } from './types/post';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/user';\nimport { getUsers } from './api/users';\nimport { Header } from './components/Header';\nimport { UsersList } from './components/UsersList';\nimport { Pagination } from './components/Pagination';\nimport { Sort } from './components/Sort';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [userPostId, setUserPostId] = useState(0);\n  const [sortOrder, setSortOrder] = useState('');\n  const [sortBy, setSortBy] = useState('');\n  const [openPosts, setOpenPosts] = useState(false);\n  const perPage = 4;\n  const lastIndex = Number(currentPage) * Number(perPage);\n  const firstIndex = Number(lastIndex) - Number(perPage);\n\n  const getPrevPage = () => {\n    setCurrentPage((prev) => prev - 1);\n  };\n\n  const getNextPage = () => {\n    setCurrentPage((prev) => prev + 1);\n  };\n\n  const getUserPostId = (postId: number) => {\n    setUserPostId(postId);\n    setOpenPosts(true);\n\n    if (userPostId === postId) {\n      setOpenPosts(!openPosts);\n    }\n  };\n\n  const sortByName = () => {\n    setSortBy('name');\n    setSortOrder('asc');\n    if (sortOrder === 'asc') {\n      setSortOrder('desc');\n    } else {\n      setSortOrder('asc');\n    }\n  };\n\n  useEffect(() => {\n    getUsers().then((response) => {\n      return setUsers(response);\n    });\n  }, [lastIndex, firstIndex]);\n\n  useEffect(() => {\n    getUserPosts(userPostId).then((response) => {\n      if (userPostId !== 0) {\n        setPosts(response.filter((user) => user.userId === userPostId));\n      } else {\n        setPosts([]);\n      }\n    });\n  }, [userPostId]);\n\n  const usersSearch = useMemo(\n    () => users\n      .filter((user) => (searchValue.length !== 0\n        ? user.name.toLowerCase().includes(searchValue.toLowerCase())\n        : user))\n      .sort((a, b) => {\n        switch (sortBy) {\n          case 'name':\n            return sortOrder === 'asc'\n              ? a[sortBy].localeCompare(b[sortBy])\n              : b[sortBy].localeCompare(a[sortBy]);\n          default:\n            return 0;\n        }\n      }),\n    [users, searchValue, sortBy, sortOrder],\n  );\n\n  const currentUsers = usersSearch.slice(firstIndex, lastIndex);\n\n  return (\n    <div className=\"page\">\n      <Header searchValue={searchValue} setSearchValue={setSearchValue} />\n      <Sort sortByName={sortByName} />\n      <UsersList\n        users={currentUsers}\n        posts={posts}\n        getUserPostId={getUserPostId}\n        openPosts={openPosts}\n      />\n      <Pagination\n        users={usersSearch}\n        perPage={perPage}\n        currentPage={currentPage}\n        getNextPage={getNextPage}\n        getPrevPage={getPrevPage}\n      />\n    </div>\n  );\n};\n","import { request } from './api';\nimport { User } from '../types/user';\n\nexport const getUsers = ():Promise<User[]> => {\n  return request('/users');\n};\n","import { request } from './api';\nimport { Post } from '../types/post';\n\nexport const getUserPosts = (userId?:number): Promise<Post[]> => {\n  if (userId) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n};\n\n// export const getPostDetail = (postId: number):Promise<Post> => {\n//   return request(`/posts/${postId}`);\n// };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}